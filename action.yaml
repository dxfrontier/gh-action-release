name: Release on PR merge
description: ''
inputs:
  GITHUB_TOKEN:
    description: 'GITHUB_TOKEN'
    required: true
  BRANCH:
    description: 'Repository branch'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Check labels to proceed versioning
      id: proceed-versioning
      if: >
        contains(github.event.pull_request.labels.*.name, 'version: patch') ||
        contains(github.event.pull_request.labels.*.name, 'version: minor') ||
        contains(github.event.pull_request.labels.*.name, 'version: major')
      run: |
        echo "Labels found for versioning. Proceeding with version bump."
        echo "Proceed versioning ..."
      shell: bash

    - name: Pull request merged
      if: github.event.pull_request.merged == true && steps.proceed-versioning.conclusion == 'success'
      run: echo "Pull request was merged."
      shell: bash

    - name: Checkout code
      if: steps.proceed-versioning.conclusion == 'success'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js 20.x
      if: steps.proceed-versioning.conclusion == 'success'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      if: steps.proceed-versioning.conclusion == 'success'
      run: npm install -g @dxfrontier/sync-mta-version
      shell: bash

    - name: Determine version bump type
      id: version-bump-type
      if: steps.proceed-versioning.conclusion == 'success'
      env:
        IS_PATCH_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: patch') }}"
        IS_MINOR_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: minor') }}"
        IS_MAJOR_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: major') }}"
      run: |
        if [ "${IS_PATCH_FOUND}" == "true" ]; then
          echo "VERSION_BUMP=patch" >> $GITHUB_ENV
          echo "Version: patch"
        elif [ "${IS_MINOR_FOUND}" == "true" ]; then
          echo "VERSION_BUMP=minor" >> $GITHUB_ENV
          echo "Version: minor"
        elif [ "${IS_MAJOR_FOUND}" == "true" ]; then
          echo "VERSION_BUMP=major" >> $GITHUB_ENV
          echo "Version: major"
        else
          exit 0
        fi
      shell: bash

    - name: Bump version to package.json
      id: version-bump
      if: steps.proceed-versioning.conclusion == 'success'
      run: npm version ${{ env.VERSION_BUMP }} --no-git-tag-version
      shell: bash

    - name: Apply version bump to package.json, /app/*/package.json, /app/*/webapp/manifest.json
      id: update-package-version
      if: steps.proceed-versioning.conclusion == 'success'
      # Check if mta.yaml exists and conditionally handle the app folder
      run: |
        if [ -f "mta.yaml" ]; then
          echo "mta.yaml found."
          if [ -d "app" ]; then
            echo "Applying version bump to package.json and manifest.json files in app."
            sync-mta-version -f mta.yaml -u /app
          else
            echo "Applying version bump to root package.json"
            sync-mta-version -f mta.yaml
          fi
        else
          echo "Skipping version bump. mta.yaml is missing."
        fi
      shell: bash

    - name: Retrieve updated npm version
      id: package-version
      if: steps.proceed-versioning.conclusion == 'success'
      uses: martinbeentjes/npm-get-version-action@v1.3.1

    - name: Push GIT tags
      id: tag
      if: steps.proceed-versioning.conclusion == 'success'
      uses: anothrNick/github-tag-action@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        WITH_V: false
        CUSTOM_TAG: ${{ steps.package-version.outputs.current-version}}
        BRANCH_HISTORY: full

    # Generate the changelog file using the configuration from cliff.toml.
    - name: Generate CHANGELOG.md partial
      id: git-cliff-partial
      if: steps.proceed-versioning.conclusion == 'success'
      uses: orhun/git-cliff-action@v4
      with:
        config: cliff.toml
        args: -vv --latest --strip header
      env:
        OUTPUT: CHANGELOG.md
        GITHUB_REPO: ${{ github.repository }}

    # Create a GitHub release using the generated changelog content.
    - name: Publish GitHub Release
      id: create-release
      if: steps.proceed-versioning.conclusion == 'success'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        body: ${{ steps.git-cliff-partial.outputs.content }}
        tag_name: ${{ steps.git-cliff-partial.outputs.version }}
        token: ${{ inputs.GITHUB_TOKEN }}
        prerelease: false
        draft: false
        make_latest: true

    # Generate the changelog file based on the cliff.toml file
    - name: Generate CHANGELOG.md
      id: git-cliff
      if: steps.proceed-versioning.conclusion == 'success'
      uses: orhun/git-cliff-action@v4
      with:
        config: cliff.toml
        args: --verbose
        OUTPUT: CHANGELOG.md
        GITHUB_REPO: ${{ github.repository }}

    # Move the generated changelog to the root folder and clean up.
    - name: Remove git-cliff files
      id: move-log
      if: steps.proceed-versioning.conclusion == 'success'
      run: |
        cp ./git-cliff/CHANGELOG.md ./
        rm ./git-cliff/CHANGELOG.md
        rmdir ./git-cliff/
        rm -rf ./git-cliff*
      shell: bash

    - name: Create pull request
      id: create-pull-request
      if: steps.proceed-versioning.conclusion == 'success'
      uses: peter-evans/create-pull-request@v7
      with:
        branch: feature-version-bump
        commit-message: 'ci: bump version, CHANGELOG.md generated'
        body: 'This Pull request contains: bump version for the package.json, mta.yaml, CHANGELOG.md updated.'
        base: ${{ inputs.BRANCH }}
        labels: deploy
